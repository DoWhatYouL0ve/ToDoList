{"version":3,"sources":["ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoList","props","useState","newTaskTitle","setNewTaskTitle","error","setError","title","onClick","deleteToDoList","id","value","onChange","e","currentTarget","onKeyPress","key","addTask","className","trim","tasks","map","t","isDone","type","changeStatus","checked","removeTask","filter","changeFilter","App","todolistId","filteredTasks","tasksObj","setTasks","newFilteredTask","v1","newTasks","todolistID","todolist","toDoLists","find","td","setToDoLists","taskId","task","toDoList1","toDoList2","filteredToDoList","tasksForToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.32ba4bc1.chunk.js","sourcesContent":["import React, {ChangeEvent,KeyboardEvent, useState} from \"react\";\r\nimport {FiltersValueType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    title: string,\r\n    id: string,\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string,\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (value: FiltersValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    filter: FiltersValueType\r\n    deleteToDoList: (todolistId: string) => void\r\n}\r\n\r\nexport function ToDoList(props: PropsType) {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            props.addTask(newTaskTitle, props.id); setNewTaskTitle('');\r\n        }}\r\n\r\n    const addTaskButton = () => {\r\n        //.trim() обрезает пробелы с обоих сторон\r\n        if (newTaskTitle.trim() === '') {\r\n            return setError('Field is required')\r\n        }\r\n        props.addTask(newTaskTitle.trim(), props.id); setNewTaskTitle('')}\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id);\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id);\r\n    const removeToDoList = () => {\r\n        props.deleteToDoList(props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title} <button onClick={removeToDoList}>X</button></h3>\r\n            <div>\r\n                <input value={newTaskTitle}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? 'error' : ''}/>\r\n                <button onClick={addTaskButton}>+</button>\r\n                {error && <div className={'error-message'}>Field is required</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map( t => {\r\n                        //так как каждая li имеет свою кнопку удаления, то не выносим эту функцию за рамки создания li\r\n                        const onRemoveHandler = () => props.removeTask(t.id, props.id);\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n                        }\r\n\r\n                        return <li key={t.id} className={t.isDone ? 'is-done' : ''}><input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <span>{t.title}</span>\r\n                        <button onClick={onRemoveHandler}>x</button></li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? 'active-filter' : ''}\r\n                        onClick={onAllClickHandler}>All</button>\r\n                <button className={props.filter === \"active\" ? 'active-filter' : ''}\r\n                        onClick={onActiveClickHandler}>Active</button>\r\n                <button className={props.filter === \"completed\" ? 'active-filter' : ''}\r\n                        onClick={onCompletedClickHandler}>Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FiltersValueType = 'all' | 'active' | 'completed';\r\n\r\ntype ToDoListtype = {\r\n    id: string\r\n    title: string\r\n    filter: FiltersValueType\r\n}\r\n\r\nfunction App() {\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let tasks = tasksObj[todolistId]\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        tasksObj[todolistId] = filteredTasks\r\n        setTasks({...tasksObj});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let newFilteredTask = {id: v1(), title: title, isDone: false};\r\n        let tasks = tasksObj[todolistId]\r\n        let newTasks = [newFilteredTask, ...tasks];\r\n        tasksObj[todolistId] = newTasks;\r\n        setTasks({...tasksObj});\r\n    }\r\n\r\n    function changeFilter(value: FiltersValueType, todolistID: string) {\r\n        let todolist= toDoLists.find( td => td.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            //чтобы функция обновила изменения и отработала нужно в нее передать изменения,\r\n            // для этого передаем копию обьекта внутрь, что бы ей было понятно что изменения произошли\r\n            setToDoLists([...toDoLists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todolistId: string) {\r\n        let tasks = tasksObj[todolistId]\r\n        let task = tasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            //чтобы функция обновила изменения и отработала нужно в нее передать изменения,\r\n            // для этого передаем копию обьекта внутрь, что бы ей было понятно что изменения произошли\r\n            setTasks({...tasksObj})\r\n        }\r\n\r\n    }\r\n\r\n    let toDoList1 = v1()\r\n    let toDoList2 = v1()\r\n\r\n    let [toDoLists, setToDoLists] = useState<Array<ToDoListtype>>([\r\n        {id: toDoList1, title: 'What to learn', filter: 'active'},\r\n        {id: toDoList2, title: 'What to buy', filter: 'completed'}\r\n    ])\r\n\r\n    let deleteToDoList = (todolistId: string) => {\r\n        let filteredToDoList = toDoLists.filter( td => td.id !== todolistId)\r\n        setToDoLists(filteredToDoList)\r\n        // delete позволяет удалить свойствоб а в нашем случае целый todolist из фронтенда\r\n        delete tasksObj[todolistId]\r\n        // удаляем данные удаленные ранее теперь уже из бизнес хранилища и перерисовываем\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n    let [tasksObj, setTasks] = useState({\r\n        [toDoList1]: [\r\n            {id: v1(), title: \"HTML/CSS\", isDone: true},\r\n            {id: v1(), title: \"JavaScript\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ],\r\n        [toDoList2]: [\r\n            {id: v1(), title: \"Book\", isDone: true},\r\n            {id: v1(), title: \"Monitor\", isDone: true},\r\n            {id: v1(), title: \"Adapter\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                toDoLists.map(td => {\r\n                    let tasksForToDoList = tasksObj[td.id];\r\n                    if (td.filter === 'completed') {\r\n                        tasksForToDoList = tasksForToDoList.filter(t => t.isDone === true);\r\n                    }\r\n                    if (td.filter === 'active') {\r\n                        tasksForToDoList = tasksForToDoList.filter(t => t.isDone === false);\r\n                    }\r\n                    return <ToDoList\r\n                        key={td.id}\r\n                        id={td.id}\r\n                        title={td.title}\r\n                        tasks={tasksForToDoList}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeStatus={changeStatus}\r\n                        filter={td.filter}\r\n                        deleteToDoList={deleteToDoList}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}