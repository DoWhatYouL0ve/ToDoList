{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","value","onChange","e","currentTarget","onKeyPress","key","addItem","variant","label","helperText","IconButton","onClick","trim","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","type","onBlur","autoFocus","onDoubleClick","ToDoList","newTitle","changeToDoListTitle","id","aria-label","deleteToDoList","Delete","addTask","tasks","map","t","className","isDone","Checkbox","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId","filteredTasks","tasksObj","setTasks","newFilteredTask","v1","newTasks","todolistID","todolist","toDoLists","find","td","setToDoLists","changeStatus","taskId","task","toDoList1","toDoList2","filteredToDoList","tl","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","style","padding","toDoList","spacing","tasksForToDoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.455b3a4d.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const addTaskButton = () => {\r\n        //.trim() обрезает пробелы с обоих сторон\r\n        if (newTaskTitle.trim() === '') {\r\n            return setError('Field is required')\r\n        }\r\n        props.addItem(newTaskTitle.trim());\r\n        setNewTaskTitle('')\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            //deleted under (newTasktitle, props.id)\r\n            props.addItem(newTaskTitle);\r\n            setNewTaskTitle('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={newTaskTitle}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                       // convert not a boolean into boolean by using !!error...\r\n                // also works the same with !![], !!{}, !!'' ect\r\n                   error={!!error} variant=\"outlined\" label={'Type here'} helperText={error}/>\r\n            <IconButton onClick={addTaskButton} color={'primary'}><ControlPoint /></IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {setEditMode(true); setTitle(props.title)}\r\n    const activateViewMode = () => {setEditMode(false); props.onChange(title)}\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField type=\"text\" value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus={true}/> :\r\n            <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FiltersValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    title: string,\r\n    id: string,\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string,\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (value: FiltersValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    filter: FiltersValueType\r\n    deleteToDoList: (todolistId: string) => void\r\n    changeToDoListTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\nexport function ToDoList(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id);\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id);\r\n    const removeToDoList = () => {\r\n        props.deleteToDoList(props.id)\r\n    }\r\n    const changeToDoListTitle = (newTitle: string) => {\r\n        props.changeToDoListTitle(props.id, newTitle)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={changeToDoListTitle} />\r\n                <IconButton aria-label=\"delete\" onClick={removeToDoList}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map( t => {\r\n                        //так как каждая li имеет свою кнопку удаления, то не выносим эту функцию за рамки создания li\r\n                        const onRemoveHandler = () => props.removeTask(t.id, props.id);\r\n                        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n                        }\r\n                        const onChangeTitleHandler = (newValue: string) => {\r\n                            props.changeTaskTitle(t.id, newValue, props.id)\r\n                        }\r\n\r\n                        return <div key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                            <Checkbox onChange={onChangeStatusHandler} checked={t.isDone}/>\r\n                            <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                            <IconButton aria-label=\"delete\" onClick={onRemoveHandler}>\r\n                                <Delete />\r\n                            </IconButton>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}>All</Button>\r\n                <Button color={'primary'} variant={props.filter === \"active\" ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active</Button>\r\n                <Button color={'secondary'} variant={props.filter === \"completed\" ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\"\r\nimport Container from '@material-ui/core/Container'\r\n\r\nexport type FiltersValueType = 'all' | 'active' | 'completed';\r\n\r\ntype ToDoListtype = {\r\n    id: string\r\n    title: string\r\n    filter: FiltersValueType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let tasks = tasksObj[todolistId]\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        tasksObj[todolistId] = filteredTasks\r\n        setTasks({...tasksObj});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let newFilteredTask = {id: v1(), title: title, isDone: false};\r\n        let tasks = tasksObj[todolistId]\r\n        let newTasks = [newFilteredTask, ...tasks];\r\n        tasksObj[todolistId] = newTasks;\r\n        setTasks({...tasksObj});\r\n    }\r\n\r\n    function changeFilter(value: FiltersValueType, todolistID: string) {\r\n        let todolist = toDoLists.find(td => td.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            //чтобы функция обновила изменения и отработала нужно в нее передать изменения,\r\n            // для этого передаем копию обьекта внутрь, что бы ей было понятно что изменения произошли\r\n            setToDoLists([...toDoLists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todolistId: string) {\r\n        let tasks = tasksObj[todolistId]\r\n        let task = tasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            //чтобы функция обновила изменения и отработала нужно в нее передать изменения,\r\n            // для этого передаем копию обьекта внутрь, что бы ей было понятно что изменения произошли\r\n            setTasks({...tasksObj})\r\n        }\r\n\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todolistId: string) {\r\n        let tasks = tasksObj[todolistId]\r\n        let task = tasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.title = newTitle\r\n            //чтобы функция обновила изменения и отработала нужно в нее передать изменения,\r\n            // для этого передаем копию обьекта внутрь, что бы ей было понятно что изменения произошли\r\n            setTasks({...tasksObj})\r\n        }\r\n\r\n    }\r\n\r\n    let toDoList1 = v1()\r\n    let toDoList2 = v1()\r\n\r\n    let [toDoLists, setToDoLists] = useState<Array<ToDoListtype>>([\r\n        {id: toDoList1, title: 'What to learn', filter: 'all'},\r\n        {id: toDoList2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    let deleteToDoList = (todolistId: string) => {\r\n        let filteredToDoList = toDoLists.filter(td => td.id !== todolistId)\r\n        setToDoLists(filteredToDoList)\r\n        // delete позволяет удалить свойствоб а в нашем случае целый todolist из фронтенда\r\n        delete tasksObj[todolistId]\r\n        // удаляем данные удаленные ранее теперь уже из бизнес хранилища и перерисовываем\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n    function changeToDoListTitle(todolistId: string, newTitle: string) {\r\n        const todolist = toDoLists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.title = newTitle\r\n            setToDoLists([...toDoLists])\r\n        }\r\n    }\r\n\r\n    let [tasksObj, setTasks] = useState<TaskStateType>({\r\n        [toDoList1]: [\r\n            {id: v1(), title: \"HTML/CSS\", isDone: true},\r\n            {id: v1(), title: \"JavaScript\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ],\r\n        [toDoList2]: [\r\n            {id: v1(), title: \"Book\", isDone: true},\r\n            {id: v1(), title: \"Monitor\", isDone: true},\r\n            {id: v1(), title: \"Adapter\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function addToDoList(title: string) {\r\n        let toDoList: ToDoListtype = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setToDoLists([toDoList, ...toDoLists])\r\n        setTasks({\r\n            ...tasksObj,\r\n            [toDoList.id]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding:\"20px\"}}>\r\n                    <AddItemForm addItem={addToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        toDoLists.map(td => {\r\n                            let tasksForToDoList = tasksObj[td.id];\r\n                            if (td.filter === 'completed') {\r\n                                tasksForToDoList = tasksForToDoList.filter(t => t.isDone === true);\r\n                            }\r\n                            if (td.filter === 'active') {\r\n                                tasksForToDoList = tasksForToDoList.filter(t => t.isDone === false);\r\n                            }\r\n                            return <Grid item><Paper style={{padding:\"10px\"}}  elevation={3}><ToDoList\r\n                                key={td.id}\r\n                                id={td.id}\r\n                                title={td.title}\r\n                                tasks={tasksForToDoList}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={td.filter}\r\n                                deleteToDoList={deleteToDoList}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeToDoListTitle={changeToDoListTitle}\r\n                            /></Paper></Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}